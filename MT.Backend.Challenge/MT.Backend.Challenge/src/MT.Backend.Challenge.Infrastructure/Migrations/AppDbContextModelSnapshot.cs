// <auto-generated />
using System;
using MT.Backend.Challenge.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MT.Backend.Challenge.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MT.Backend.Challenge.Domain.Entities.DeliveryDriver", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<int>("DriversLicenseCategory")
                        .HasColumnType("integer");

                    b.Property<string>("DriversLicenseImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("DriversLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DriversLicenseValidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Document")
                        .IsUnique();

                    b.HasIndex("DriversLicenseNumber")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("DeliveryDrivers");
                });

            modelBuilder.Entity("MT.Backend.Challenge.Domain.Entities.Motorcycle", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("MT.Backend.Challenge.Domain.Entities.Rental", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryDriverId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EstimatedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MotorcycleId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RentalCategoryId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryDriverId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("RentalCategoryId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("MT.Backend.Challenge.Domain.Entities.RentalCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("PercentualFine")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("RentalCategoryDays")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RentalCategoryDays")
                        .IsUnique();

                    b.ToTable("RentalCategories");

                    b.HasData(
                        new
                        {
                            Id = "bd757831-c4c0-426b-859f-2e2b1da3390a",
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 23, 15, 46, 1, 658, DateTimeKind.Utc).AddTicks(6765),
                            Name = "7 dias",
                            PercentualFine = 0.2m,
                            Price = 30m,
                            RentalCategoryDays = 7,
                            UpdatedAt = new DateTime(2024, 10, 23, 15, 46, 1, 658, DateTimeKind.Utc).AddTicks(6769)
                        },
                        new
                        {
                            Id = "61a2c438-449c-4b9a-88e8-a9e7a73fe4f1",
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 23, 15, 46, 1, 658, DateTimeKind.Utc).AddTicks(6900),
                            Name = "15 dias",
                            PercentualFine = 0.4m,
                            Price = 28m,
                            RentalCategoryDays = 15,
                            UpdatedAt = new DateTime(2024, 10, 23, 15, 46, 1, 658, DateTimeKind.Utc).AddTicks(6901)
                        },
                        new
                        {
                            Id = "342062ab-a6d0-4bf7-a13b-79392ece859f",
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 23, 15, 46, 1, 658, DateTimeKind.Utc).AddTicks(6908),
                            Name = "30 dias",
                            PercentualFine = 0m,
                            Price = 22m,
                            RentalCategoryDays = 30,
                            UpdatedAt = new DateTime(2024, 10, 23, 15, 46, 1, 658, DateTimeKind.Utc).AddTicks(6908)
                        },
                        new
                        {
                            Id = "3cef2a62-9867-4e7d-aa9c-94014375fb55",
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 23, 15, 46, 1, 658, DateTimeKind.Utc).AddTicks(6915),
                            Name = "45 dias",
                            PercentualFine = 0m,
                            Price = 20m,
                            RentalCategoryDays = 45,
                            UpdatedAt = new DateTime(2024, 10, 23, 15, 46, 1, 658, DateTimeKind.Utc).AddTicks(6915)
                        },
                        new
                        {
                            Id = "836809c9-1461-443e-a3a3-8e232c9c45ba",
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 23, 15, 46, 1, 658, DateTimeKind.Utc).AddTicks(6920),
                            Name = "50 dias",
                            PercentualFine = 0m,
                            Price = 18m,
                            RentalCategoryDays = 50,
                            UpdatedAt = new DateTime(2024, 10, 23, 15, 46, 1, 658, DateTimeKind.Utc).AddTicks(6921)
                        });
                });

            modelBuilder.Entity("MT.Backend.Challenge.Domain.Entities.Rental", b =>
                {
                    b.HasOne("MT.Backend.Challenge.Domain.Entities.DeliveryDriver", "DeliveryDriver")
                        .WithMany()
                        .HasForeignKey("DeliveryDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MT.Backend.Challenge.Domain.Entities.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MT.Backend.Challenge.Domain.Entities.RentalCategory", "RentalCategory")
                        .WithMany()
                        .HasForeignKey("RentalCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryDriver");

                    b.Navigation("Motorcycle");

                    b.Navigation("RentalCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
